groups:
- name: download_buildpack
  jobs:
  - regulator
  - download-((buildpack-name))
- name: update_buildpack
  jobs:
  - trigger-buildpack-update
  - stage-((buildpack-name))
  - test-((buildpack-name))
  - promote-((buildpack-name))

cf_params: &cf_params
  CF_API_URI: ((cf-api-uri))
  CF_USERNAME: ((cf-username))
  CF_PASSWORD: ((cf-password))
  CF_ORG: ((cf-organization))
  CF_SPACE: ((cf-space))
  STACKS: ((stack))

resources:
- name: ((buildpack-name))
  type: ((input-resource-type))
  icon: package-variant-closed
  source: ((input-resource-source))

- name: ((buildpack-name))-test-app
  type: ((test-app-type))
  icon: github-circle
  source: ((test-app-source))

- name: ((buildpack-name))-s3-output
  type: s3
  icon: package-variant-closed
  source:
    endpoint: ((s3-minio-endpoint))
    bucket: ((s3-bucket))
    regexp: ((buildpack-regex-output))
    access_key_id: ((s3-access-key-id))
    secret_access_key: ((s3-secret-access-key))
    disable_ssl: true
    #skip_ssl_verification: true

- name: ((buildpack-name))-s3
  type: s3
  icon: package-variant-closed
  source:
    endpoint: ((s3-minio-endpoint))
    bucket: ((s3-bucket))
    regexp: ((buildpack-regex))
    access_key_id: ((s3-access-key-id))
    secret_access_key: ((s3-secret-access-key))
    disable_ssl: true
    #skip_ssl_verification: true

jobs:
- name: regulator
  plan:
  - in_parallel:
    - (( append ))
    - get: ((buildpack-name))
      params: { globs: [] }
      trigger: true

# Buildpack
- name: download-((buildpack-name))
  plan:
  - get: ((buildpack-name))
    params: { globs: ["*((stack))*"] }
    trigger: true
    passed:
    - regulator
  - put: ((buildpack-name))-s3-output
    params:
      file: ((buildpack-name))/((buildpack-ls))

- name: stage-((buildpack-name))
  serial_groups: [cc-api]
  plan:
  - in_parallel:
    - get: buildpack-mgmt-pipelines
    - get: ((buildpack-name))-s3
    - get: buildpack-mgmt-cmdb
  - task: upload-buildpack
    file: buildpack-mgmt-pipelines/tasks/stage-buildpack/task.yml
    input_mapping: {buildpack: ((buildpack-name))-s3}
    params:
      BUILDPACK_NAME: ((cf-staging-buildpack-name))
      <<: *cf_params

- name: test-((buildpack-name))
  serial_groups: [cc-api]
  plan:
  - in_parallel:
    - get: buildpack-mgmt-pipelines
    - get: ((buildpack-name))-test-app
      passed: ((test-app-passed))
    - get: buildpack-mgmt-cmdb
      trigger: true
      passed:
       - stage-((buildpack-name))
  - task: deploy-test-app-with-((buildpack-name))
    file: buildpack-mgmt-pipelines/tasks/push-app/task.yml
    input_mapping: {app: ((buildpack-name))-test-app}
    params:
      BUILDPACK_NAME: ((cf-staging-buildpack-name))
      APP_NAME: cf-test-((buildpack-name))
      <<: *cf_params
  - task: test-((buildpack-name))
    file: buildpack-mgmt-pipelines/tasks/validate-app/task.yml
    params:
      APP_NAME: cf-test-((buildpack-name))
      CF_APP_URL: ((cf-apps-url))
      BUILDPACK_NAME: ((cf-staging-buildpack-name))
      <<: *cf_params

- name: promote-((buildpack-name))
  serial_groups: [cc-api]
  plan:
  - in_parallel:
    - get: buildpack-mgmt-pipelines
    - get: buildpack-mgmt-cmdb
      trigger: true
      passed:
       - test-((buildpack-name))
  - task: promote-buildpack
    file: buildpack-mgmt-pipelines/tasks/promote-buildpack/task.yml
    params:
      SOURCE_BUILDPACK_NAME: ((cf-staging-buildpack-name))
      TARGET_BUILDPACK_NAME: ((cf-buildpack-name))
      <<: *cf_params
    on_success:
      put: rocketchat
      params:
        channel: ((channel))
        message: "[((human-readable-name))] update Successful. We have updated the ((cf-buildpack-name)) (cflinuxfs3) on ((environment))."
        alias: Concourse-rocket-operator
    on_failure:
      put: rocketchat
      params:
        channel: ((channel))
        message:  "[((human-readable-name))] update failed. Failed to update ((cf-buildpack-name)) (cflinuxfs3) on ((environment))."
        alias: Concourse-rocket-operator